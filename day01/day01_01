1.1 자료구조와 STL(표준템플릿라이브러리)

ㅁ 자료구조 : 자료를 메모리에 표현하는 구조
        (선형자료구조, 비선형자료구조)
ㅁ 선형자료구조
    배열 : 같은 종류의 자료를 연속적인 메모리에 관리
    연결리스트 : 데이터와 링크로 구성하는 노드들의 선형집합
    스택(Last In First Out) : 임시적으로 자료를 보관하는 버퍼, 가장 최근에 보관한 자료를 꺼내줌
    큐(First in First Out) : 가장 먼저 보관한 자료를 꺼내줌
    <STL에서 제공하는 선형자료구조: vector, list, 
    선형자료구조를 목적에 맞게 변형한 stack, queue, priority_queue>
ㅁ 비선형자료구조
    트리 : 나무뿌리처럼 자료를 보관하는 모습을 계층적으로 표현
    그래프 : 정점과 간선으로 표현
    <STL에서 제공하는 비선형자료구조:
    set, multiset, map, multimap, hash_map,.. bitset, valarray.., pair)

    ...STL은... 
    개체들을 보관하기 위한 다양한 자료구조와 
    이들 자료구조에 보관된 개체들을 반복적으로 순회할 수 있게 해주는 반복자,
    사용자에 정의한 코드를 입력인자로 전달받아 처리할 수 있게 추상화한 함수 개체,
    다양한 문제해결방법이 구현된 함수들로 구성된 알고리즘 등으로 구성
    keyword : 자료구조, 반복자, 함수개체, 알고리즘

    - STL에서 제공하는 자료구조는 템플릿으로 정의
    클래스 이름과 같은 이름의 파일에 정의
    ex)선형자료구조인 vector을 사용하기 위한 포함문, using문
        #include <vector>
        using std::vector;
        #include <list>
        using std::list;

    - STL에서 제공하는 반복자는 컨테이너 종류에 상관없이
    컨테이너 특정 구간에 보관된 개체들에 대해 차례대로 같은 방법으로 작업할 때 사용.
    실제 각 컨테이너의 자료를 보관하는 구조에 따라 각 반복자의 구현은 다르게 정의되어 있지만
    같은 방법으로 사용 가능. 반복자에 간접연산으로 보관한 데이터를 얻을 수 있다.
    ex)
        vector<int> vi;
        ---중략---
        vector<int>::iterator seek = vi.begin();
        vector<int>::iterator end = vi.end();
        for( ;seek != end ; ++seek){
            cout<<*seek<<endl;
        }
    ex)
        list<int> li;
        ---중략---
        list<int>::iterator seek = li.begin();
        list<int?::iterator end = li.end();
        for( ;seek != end ; ++seek){
            cout<<*seek<<endl;
        }    

    STL에서는 다양한 알고리즘을 템플릿 함수로 제공.
    일부 함수에서는 사용하는곳에서 일부 알고리즘을 정의하여 인자로 전달.
    이 때 전달할 알고리즘의 추상적인 모습은 STL에서 사용하는 것에 맞게 구현해야 하는데
    이를 함수개체라고 함.

    예를들어 